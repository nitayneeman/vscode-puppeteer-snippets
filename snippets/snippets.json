{
  "Puppeteer": {
    "prefix": "p-import",
    "body": "const ${1:puppeteer} = require('puppeteer');",
    "description": "Imports Puppeteer's full module"
  },
  "Puppeteer - core": {
    "prefix": "p-import-core",
    "body": "const ${1:puppeteer} = require('puppeteer-core');",
    "description": "Imports Puppeteer's core module"
  },
  "Puppeteer - firefox": {
    "prefix": "p-import-firefox",
    "body": "const ${1:puppeteer} = require('puppeteer-firefox');",
    "description": "Imports Puppeteer's Firefox module"
  },
  "puppeteer - devices": {
    "prefix": "p-import-devices",
    "body": "const { devices } = require('puppeteer');",
    "description": "Imports the device descriptors module"
  },
  "puppeteer.connect": {
    "prefix": "p-connect",
    "body": ["await puppeteer.connect({", "\tbrowserURL: '$0'", "});"],
    "description": "Attaches Puppeteer to an existing Chromium instance"
  },
  "puppeteer.launch": {
    "prefix": "p-launch",
    "body": "const ${1:browser} = await puppeteer.launch($0);",
    "description": "Creates a Chromium instance and attaches Puppeteer to it"
  },
  "browser.browserContexts": {
    "prefix": "p-browser-browserContexts",
    "body": "browser.browserContexts();",
    "description": "Returns an array of all browser contexts"
  },
  "browser.close": {
    "prefix": "p-browser-close",
    "body": "await browser.close();",
    "description": "Closes Chromium and all of its pages"
  },
  "browser.createIncognitoBrowserContext": {
    "prefix": "p-browser-createIncognitoBrowserContext",
    "body": "const ${1:context} = await browser.createIncognitoBrowserContext();",
    "description": "Creates a new browser context"
  },
  "browser.disconnect": {
    "prefix": "p-browser-disconnect",
    "body": "browser.disconnect();",
    "description": "Disconnects Puppeteer from the browser, but leaves the Chromium process running"
  },
  "browser.newPage": {
    "prefix": "p-browser-newPage",
    "body": "const ${1:page} = await browser.newPage();",
    "description": "Resolves a new page with the default browser context"
  },
  "browser.waitForTarget": {
    "prefix": "p-browser-waitForTarget",
    "body": "await browser.waitForTarget($0);",
    "description": "Waits until a predicate within any browser context returns a truthy value"
  },
  "browser.on('disconnected')": {
    "prefix": "p-browser-on-disconnected",
    "body": ["browser.on('disconnected', () => {", "\t$0", "});"],
    "description": "Emitted when Puppeteer gets disconnected from the Chromium instance"
  },
  "page.$": {
    "prefix": "p-page-$",
    "body": "await page.$('$0');",
    "description": "Runs `document.querySelector` within the page"
  },
  "page.$$": {
    "prefix": "p-page-$$",
    "body": "await page.$$('$0');",
    "description": "Runs `document.querySelectorAll` within the page"
  },
  "page.$eval": {
    "prefix": "p-page-$eval",
    "body": [
      "await page.$eval('$2', element => {",
      "\t${3:console.log(element);}",
      "});"
    ],
    "description": "Runs `document.querySelector` within the page and passes the result as the first argument to a function"
  },
  "page.$$eval": {
    "prefix": "p-page-$$eval",
    "body": [
      "await page.$$eval('$2', elements => {",
      "\t${3:console.log(elements);}",
      "});"
    ],
    "description": "Runs `document.querySelectorAll` within the page and passes the results as the first argument to a function"
  },
  "page.browser": {
    "prefix": "p-page-browser",
    "body": "page.browser();",
    "description": "Returns the browser the page belongs to"
  },
  "page.click": {
    "prefix": "p-page-click",
    "body": "await page.click('$0');",
    "description": "Clicks in the center of an element within the page"
  },
  "page.close": {
    "prefix": "p-page-close",
    "body": "await page.close();",
    "description": "Closes the page"
  },
  "page.content": {
    "prefix": "p-page-content",
    "body": "await page.content();",
    "description": "Returns the full HTML contents of the page"
  },
  "page.emulate": {
    "prefix": "p-page-emulate",
    "body": "await page.emulate($0);",
    "description": "Emulates a given device metrics and user agent within the page"
  },
  "page.emulateMediaFeatures": {
    "prefix": "p-page-emulateMediaFeatures",
    "body": "await page.emulateMediaFeatures([$0]);",
    "description": "Changes the CSS media type of the page"
  },
  "page.emulateMediaType": {
    "prefix": "p-page-emulateMediaType",
    "body": "await page.emulateMediaType(${2|'screen','print',null|});",
    "description": "Emulates a given CSS media features within the page"
  },
  "page.emulateTimezone": {
    "prefix": "p-page-emulateTimezone",
    "body": "await page.emulateTimezone($0);",
    "description": "Changes the timezone of the page"
  },
  "page.evaluate": {
    "prefix": "p-page-evaluate",
    "body": ["await page.evaluate(() => {", "\t$0", "});"],
    "description": "Evaluates a function in the page context"
  },
  "page.focus": {
    "prefix": "p-page-focus",
    "body": "await page.focus('$0');",
    "description": "Focuses an element within the page"
  },
  "page.goBack": {
    "prefix": "p-page-goBack",
    "body": "await page.goBack();",
    "description": "Navigates to the previous page in the history"
  },
  "page.goForward": {
    "prefix": "p-page-goForward",
    "body": "await page.goForward();",
    "description": "Navigates to the next page in the history"
  },
  "page.goto": {
    "prefix": "p-page-goto",
    "body": "await page.goto('$0');",
    "description": "Navigates the page to a URL"
  },
  "page.hover": {
    "prefix": "p-page-hover",
    "body": "await page.hover('$0');",
    "description": "Hovers over the center of an element within the page"
  },
  "page.keyboard.down": {
    "prefix": "p-page-keyboard-down",
    "body": "await page.keyboard.down('$0');",
    "description": "Dispatches a `keydown` event within the page"
  },
  "page.keyboard.press": {
    "prefix": "p-page-keyboard-press",
    "body": "await page.keyboard.press('$0');",
    "description": "Presses on a specific key within the page"
  },
  "page.keyboard.sendCharacter": {
    "prefix": "p-page-keyboard-sendCharacter",
    "body": "await page.keyboard.sendCharacter('$0');",
    "description": "Dispatches a `keypress` and `input` event within the page"
  },
  "page.keyboard.type": {
    "prefix": "p-page-keyboard-type",
    "body": "await page.keyboard.type('$0');",
    "description": "Types a text into a focused element within the page"
  },
  "page.keyboard.up": {
    "prefix": "p-page-keyboard-up",
    "body": "await page.keyboard.up('$0');",
    "description": "Dispatches a `keyup` event within the page"
  },
  "page.metrics": {
    "prefix": "p-page-metrics",
    "body": "const ${1:metrics} = await page.metrics();",
    "description": "Returns runtime metrics of the page"
  },
  "page.mouse.click": {
    "prefix": "p-page-mouse-click",
    "body": "await page.mouse.click(${2:0}, ${3:100});",
    "description": "Clicks on area within the page by coordinates"
  },
  "page.mouse.down": {
    "prefix": "p-page-mouse-down",
    "body": "await page.mouse.down();",
    "description": "Dispatches a `mousedown` event within the page"
  },
  "page.mouse.move": {
    "prefix": "p-page-mouse-move",
    "body": "await page.mouse.move();",
    "description": "Dispatches a `mousemove` event within the page"
  },
  "page.mouse.up": {
    "prefix": "p-page-mouse-up",
    "body": "await page.mouse.up();",
    "description": "Dispatches a `mouseup` event within the page"
  },
  "page.pdf": {
    "prefix": "p-page-pdf",
    "body": "await page.pdf({ path: '${2:page.pdf}', format: '${3|A4,Letter,Legal,Tabloid,Ledger,A0,A1,A2,A3,A5,A6|}' });",
    "description": "Generates a PDF from the page"
  },
  "page.reload": {
    "prefix": "p-page-reload",
    "body": "await page.reload();",
    "description": "Reloads the page"
  },
  "page.screenshot": {
    "prefix": "p-page-screenshot",
    "body": "await page.screenshot({ path: '${2:page.png}', fullPage: '${3|true,false|}' });",
    "description": "Generates a screenshot of the page"
  },
  "page.title": {
    "prefix": "p-page-title",
    "body": "await page.title();",
    "description": "Returns the page's title"
  },
  "page.url": {
    "prefix": "p-page-url",
    "body": "await page.url();",
    "description": "Returns the page's URL"
  },
  "page.waitFor": {
    "prefix": "p-page-waitFor",
    "body": "await page.waitFor($0);",
    "description": "Waits until an element/predicate/timeout within the page is resolved"
  },
  "page.waitForFunction": {
    "prefix": "p-page-waitForFunction",
    "body": "await page.waitForFunction($0);",
    "description": "Waits until a predicate within the page returns a truthy value"
  },
  "page.waitForNavigation": {
    "prefix": "p-page-waitForNavigation",
    "body": "await page.waitForNavigation();",
    "description": "Waits until the page navigates to a new URL or reloads"
  },
  "page.waitForRequest": {
    "prefix": "p-page-waitForRequest",
    "body": "await page.waitForRequest($0);",
    "description": "Waits until a request by URL/predicate is resolved"
  },
  "page.waitForResponse": {
    "prefix": "p-page-waitForResponse",
    "body": "await page.waitForResponse($0);",
    "description": "Waits until a response by URL/predicate is resolved"
  },
  "page.waitForSelector": {
    "prefix": "p-page-waitForSelector",
    "body": "await page.waitForSelector('$0');",
    "description": "Waits until an element (by selector) is appeared in the page"
  },
  "page.waitForXPath": {
    "prefix": "p-page-waitForXPath",
    "body": "await page.waitForXPath('$0');",
    "description": "Waits until an element (by XPath) is appeared in the page"
  },
  "page.waitForFileChooser": {
    "prefix": "p-page-waitForFileChooser",
    "body": "await page.waitForFileChooser();",
    "description": "Waits until a file chooser is requested in the page"
  },
  "page.on('close')": {
    "prefix": "p-page-on-close",
    "body": [
      "page.on('close', () => {",
      "\t${0:console.log('Closed');}",
      "});"
    ],
    "description": "Emitted when the page is closed"
  },
  "page.on('console')": {
    "prefix": "p-page-on-console",
    "body": [
      "page.on('console', msg => {",
      "\t${0:console.log(msg.args());}",
      "});"
    ],
    "description": "Emitted when a script within the page calls one of console API methods"
  },
  "page.on('dialog')": {
    "prefix": "p-page-on-dialog",
    "body": [
      "page.on('dialog', dialog => {",
      "\t${0:console.log(dialog.message());}",
      "});"
    ],
    "description": "Emitted when a dialog appears in the page"
  },
  "page.on('domcontentloaded')": {
    "prefix": "p-page-on-domcontentloaded",
    "body": [
      "page.on('domcontentloaded', () => {",
      "\t${0:console.log('DOMContentLoaded is dispatched');}",
      "});"
    ],
    "description": "Emitted when the `DOMContentLoaded` event of the page is dispatched"
  },
  "page.on('error')": {
    "prefix": "p-page-on-error",
    "body": [
      "page.on('error', error => {",
      "\t${0:console.log(error);}",
      "});"
    ],
    "description": "Emitted when the page crashes"
  },
  "page.on('frameattached')": {
    "prefix": "p-page-on-frameattached",
    "body": [
      "page.on('frameattached', frame => {",
      "\t${0:console.log(frame.content());}",
      "});"
    ],
    "description": "Emitted when a frame within the page is attached"
  },
  "page.on('framedetached')": {
    "prefix": "p-page-on-framedetached",
    "body": [
      "page.on('framedetached', frame => {",
      "\t${0:console.log(frame.content());}",
      "});"
    ],
    "description": "Emitted when a frame within the page is detached"
  },
  "page.on('framenavigated')": {
    "prefix": "p-page-on-framenavigated",
    "body": [
      "page.on('framenavigated', frame => {",
      "\t${0:console.log(frame.content());}",
      "});"
    ],
    "description": "Emitted when a frame within the page is navigated to a new url"
  },
  "page.on('load')": {
    "prefix": "p-page-on-load",
    "body": ["page.on('load', () => {", "\t${0:console.log('Loaded');}", "});"],
    "description": "Emitted when the `load` event of the page is dispatched"
  },
  "page.on('metrics')": {
    "prefix": "p-page-on-metrics",
    "body": [
      "page.on('metrics', result => {",
      "\t${0:console.log(result.metrics);}",
      "});"
    ],
    "description": "Emitted when a script within the page invokes `console.timeStamp`"
  },
  "page.on('pageerror')": {
    "prefix": "p-page-on-pageerror",
    "body": [
      "page.on('pageerror', error => {",
      "\t${0:console.log(error);}",
      "});"
    ],
    "description": "Emitted when an uncaught exception happens within the page"
  },
  "page.on('popup')": {
    "prefix": "p-page-on-popup",
    "body": [
      "page.on('popup', page => {",
      "\t${0:console.log(page.content());}",
      "});"
    ],
    "description": "Emitted when the page opens a new tab or window"
  },
  "page.on('request')": {
    "prefix": "p-page-on-request",
    "body": [
      "page.on('request', request => {",
      "\t${0:console.log(request.url());}",
      "});"
    ],
    "description": "Emitted when the request is issued by the page"
  },
  "page.on('requestfailed')": {
    "prefix": "p-page-on-requestfailed",
    "body": [
      "page.on('requestfailed', request => {",
      "\t${0:console.log(request.url());}",
      "});"
    ],
    "description": "Emitted when a request fails"
  },
  "page.on('requestfinished')": {
    "prefix": "p-page-on-requestfinished",
    "body": [
      "page.on('requestfailed', request => {",
      "\t${0:console.log(request.url());}",
      "});"
    ],
    "description": "Emitted when a request finishes successfully"
  },
  "page.on('response')": {
    "prefix": "p-page-on-response",
    "body": [
      "page.on('response', response => {",
      "\t${0:console.log(response.status());}",
      "});"
    ],
    "description": "Emitted when a response is received"
  },
  "page.on('workercreated')": {
    "prefix": "p-page-on-workercreated",
    "body": [
      "page.on('workercreated', worker => {",
      "\t${0:console.log(worker.url());}",
      "});"
    ],
    "description": "Emitted when a dedicated `WebWorker` is spawned by the page"
  },
  "page.on('workerdestroyed')": {
    "prefix": "p-page-on-workerdestroyed",
    "body": [
      "page.on('workerdestroyed', worker => {",
      "\t${0:console.log(worker.url());}",
      "});"
    ],
    "description": "Emitted when a dedicated `WebWorker` is terminated"
  },
  "Examples - basic": {
    "prefix": "p-examples-basic",
    "body": [
      "const puppeteer = require('puppeteer');",
      "",
      "(async () => {",
      "\tconst browser = await puppeteer.launch();",
      "\tconst page = await browser.newPage();",
      "",
      "\t$0",
      "",
      "\tawait browser.close();",
      "})();"
    ],
    "description": "Creates a basic usage example of a page"
  },
  "Examples - sleep": {
    "prefix": "p-examples-sleep",
    "body": [
      "const sleep = duration => new Promise(resolve => setTimeout(resolve, duration));",
      "await sleep($0);"
    ],
    "description": "Creates an example that sleeps the browser with a specified time period"
  },
  "Examples - drag and drop": {
    "prefix": "p-examples-dragAndDrop",
    "body": [
      "// Drags the mouse from a point",
      "await page.mouse.move($1);",
      "await page.mouse.down();",
      "",
      "// Drops the mouse to another point",
      "await page.mouse.move($2);",
      "await page.mouse.up();"
    ],
    "description": "Creates an example that drags the mouse from a point and drops it to another point"
  },
  "Examples - load time metrics": {
    "prefix": "p-examples-loadTimeMetrics",
    "body": [
      "const ${1:metrics} = await page.evaluate(() => JSON.stringify(window.performance));",
      "console.info(JSON.parse($1));"
    ],
    "description": "Creates an example that evaluates `window.performance` within the page context"
  }
}
