{
  "page.$": {
    "prefix": "p$",
    "body": "await page.$('${1}');",
    "description": "Puppeteer - runs `document.querySelector` within the page"
  },
  "page.$$": {
    "prefix": "p$$",
    "body": "await page.$$('${1}');",
    "description": "Puppeteer - runs `document.querySelectorAll` within the page"
  },
  "page.browser": {
    "prefix": "pb",
    "body": "page.browser();",
    "description": "Puppeteer - returns the browser the page belongs to"
  },
  "page.click": {
    "prefix": "pclk",
    "body": "await page.click('${1}');",
    "description": "Puppeteer - clicks in the center of an element within the page"
  },
  "page.close": {
    "prefix": "pcls",
    "body": "await page.close();",
    "description": "Puppeteer - closes the page"
  },
  "page.content": {
    "prefix": "pcnt",
    "body": "await page.content();",
    "description": "Puppeteer - returns the full HTML contents of the page"
  },
  "page.focus": {
    "prefix": "pf",
    "body": "await page.focus('${1}');",
    "description": "Puppeteer - focuses an element within the page"
  },
  "page.goBack": {
    "prefix": "pgb",
    "body": "await page.goBack();",
    "description": "Puppeteer - navigates to the previous page in the history"
  },
  "page.goForward": {
    "prefix": "pgf",
    "body": "await page.goForward();",
    "description": "Puppeteer - navigates to the next page in the history"
  },
  "page.goto": {
    "prefix": "pg",
    "body": "await page.goto('${1}');",
    "description": "Puppeteer - navigates the page to a URL"
  },
  "page.hover": {
    "prefix": "ph",
    "body": "await page.hover('${1}');",
    "description": "Puppeteer - hovers over the center of an element within the page"
  },
  "page.pdf": {
    "prefix": "pp",
    "body": "await page.pdf({ path: '${1:page.pdf}', format: '${2|A4,Letter,Legal,Tabloid,Ledger,A0,A1,A2,A3,A5,A6|}' });",
    "description": "Puppeteer - generates a PDF from the page"
  },
  "page.reload": {
    "prefix": "pr",
    "body": "await page.reload();",
    "description": "Puppeteer - reloads the page"
  },
  "page.screenshot": {
    "prefix": "ps",
    "body": "await page.screenshot({ path: '${1:page.png}', fullPage: '${2|true,false|}' });",
    "description": "Puppeteer - generates a screenshot of the page"
  },
  "page.title": {
    "prefix": "pt",
    "body": "await page.title();",
    "description": "Puppeteer - returns the page's title"
  },
  "page.url": {
    "prefix": "pu",
    "body": "await page.url();",
    "description": "Puppeteer - returns the page's URL"
  },
  "page.waitFor": {
    "prefix": "pwf",
    "body": "await page.waitFor(${1});",
    "description": "Puppeteer - waits until an element/predicate/timeout within the page is resolved"
  },
  "page.waitForFunction": {
    "prefix": "pwff",
    "body": "await page.waitForFunction(${1});",
    "description": "Puppeteer - waits until a predicate within the page returns a truthy value"
  },
  "page.waitForNavigation": {
    "prefix": "pwfn",
    "body": "await page.waitForNavigation();",
    "description": "Puppeteer - waits until the page navigates to a new URL or reloads"
  },
  "page.waitForRequest": {
    "prefix": "pwfreq",
    "body": "await page.waitForRequest(${1});",
    "description": "Puppeteer - waits until a request by URL/predicate is resolved"
  },
  "page.waitForResponse": {
    "prefix": "pwfres",
    "body": "await page.waitForResponse(${1});",
    "description": "Puppeteer - waits until a response by URL/predicate is resolved"
  },
  "page.waitForSelector": {
    "prefix": "pwfs",
    "body": "await page.waitForSelector('${1}');",
    "description": "Puppeteer - waits until an element (by selector) is appeared in the page"
  },
  "page.waitForXPath": {
    "prefix": "pwfx",
    "body": "await page.waitForXPath('${1}');",
    "description": "Puppeteer - waits until an element (by XPath) is appeared in the page"
  },
  "page.on('close')": {
    "prefix": "poclose",
    "body": ["page.on('close', () => {", "\t${0:console.log('Closed');}", "});"],
    "description": "Puppeteer - emitted when the page is closed"
  },
  "page.on('console')": {
    "prefix": "poconsole",
    "body": ["page.on('console', msg => {", "\t${0:console.log(msg.args());}", "});"],
    "description": "Puppeteer - emitted when a script within the page calls one of console API methods"
  },
  "page.on('dialog')": {
    "prefix": "podialog",
    "body": ["page.on('dialog', dialog => {", "\t${0:console.log(dialog.message());}", "});"],
    "description": "Puppeteer - emitted when a dialog appears in the page"
  },
  "page.on('domcontentloaded')": {
    "prefix": "podmcl",
    "body": [
      "page.on('domcontentloaded', () => {",
      "\t${0:console.log('DOMContentLoaded is dispatched');}",
      "});"
    ],
    "description": "Puppeteer - emitted when the `DOMContentLoaded` event of the page is dispatched"
  },
  "page.on('error')": {
    "prefix": "poerror",
    "body": ["page.on('error', error => {", "\t${0:console.log(error);}", "});"],
    "description": "Puppeteer - emitted when the page crashes"
  },
  "page.on('frameattached')": {
    "prefix": "pofa",
    "body": ["page.on('frameattached', frame => {", "\t${0:console.log(frame.content();}", "});"],
    "description": "Puppeteer - emitted when a frame within the page is attached"
  },
  "page.on('framedetached')": {
    "prefix": "pofd",
    "body": ["page.on('framedetached', frame => {", "\t${0:console.log(frame.content();}", "});"],
    "description": "Puppeteer - emitted when a frame within the page is detached"
  },
  "page.on('framenavigated')": {
    "prefix": "pofn",
    "body": ["page.on('framenavigated', frame => {", "\t${0:console.log(frame.content();}", "});"],
    "description": "Puppeteer - emitted when a frame within the page is navigated to a new url"
  },
  "page.on('load')": {
    "prefix": "poload",
    "body": ["page.on('load', () => {", "\t${0:console.log('Loaded');}", "});"],
    "description": "Puppeteer - emitted when the `load` event of the page is dispatched"
  },
  "page.on('metrics')": {
    "prefix": "pometrics",
    "body": ["page.on('metrics', result => {", "\t${0:console.log(result.metrics);}", "});"],
    "description": "Puppeteer - emitted when a script within the page invokes `console.timeStamp`"
  }
}
